# -*- coding: utf-8 -*-
"""script_audio.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ujrouLwSJFE1LEytReMu0YZ3yfL-Yrtr
"""
import sys
#PARAMETERS 
if len(sys.argv)==1: 
  raise Exception("inserire cartella dataset, modelliSalvati deve stare nella stessa dir di questo script")
root_folder = sys.argv[1]
models_folder = './ModelliSalvati/Audio'
import os
from PIL import Image
import librosa
import glob
import time
import numpy as np
import pandas as pd 

# image MFCC 128x44
def getClass(filename):
  path=os.path.dirname(filename)
  return os.path.basename(path)
audio_list = []
i=0
t0=time.time()

audios = []
sample_rates = []
labels = []

for filename in glob.glob(root_folder + '/*/*.wav'):
    y = getClass(filename)
    x , sr = librosa.load(filename, mono=True)
    spec = librosa.feature.melspectrogram(y=x, sr=sr)
    db_spec = librosa.power_to_db(spec, ref=np.max,)
    a = db_spec.shape[0]
    b = db_spec.shape[1]
    audios.append(db_spec.reshape(a*b))
    labels.append(y)
    i=i+1
    if(i%100==0):
        print(i,"caricate")

df = pd.DataFrame(audios)
print("trasformazione etichette")
labels = {}
i=0
res = []
for filename in glob.glob(root_folder + '/*'):
  l = filename[len(root_folder)+1:]
  labels[l] = i
  i=i+1
for l in y:
    res.append(labels[l])
y = np.array(res)
print("done!")
x = df.dropna()
x = df.to_numpy()
max_data = np.max(x)
min_data = np.min(x)
data = (x-min_data)/(max_data-min_data+1e-6)
data =  data-0.5
print("Normalization done!")
# x = data.reshape(data.shape[0],128,44,1)
y = y.to_numpy()

problems = ["/Classificatori","/outlier"]
import keras
import pickle
import pyod
print(models_folder+problems[0]+'/*')
for filename in glob.glob(models_folder+problems[0]+'/*'):
  print(filename)
  ext = filename.split(".")
  if ext[1]!='png':
    print("Valutando",filename)
    if ext[1] == 'h5':
      model = pickle.load(open(filename, 'rb'))
      xf = x.reshape(x.shape[0],128,44,1)
      res = model.evaluate(xf,y)
      print(res[1])
    else:
      model = pickle.load(open(filename, 'rb'))
      xf = x.reshape(x.shape[0],128*44)
      print(model.score(xf,y))

outlier = np.ones(30)
outlier = outlier*(-1)
outlier[29] = 1
from sklearn.metrics import accuracy_score
outlier2 = np.ones(30)
outlier2[29] = 0
x = x.reshape(x.shape[0],128*44)
for filename in glob.glob(models_folder+problems[1]+'/*'):
  ext = filename.split(".")
  print("Valutando",filename)
  if ext[1] == 'pyod':
    y_true = [ outlier2[n] for n in y ]
    y_true = np.array(y_true)
    model = pickle.load(open(filename, 'rb'))
    y_pred = model.predict(x)
    print("\t->Accuracy: ", accuracy_score(y_true, y_pred))
  else:
    y_true = [ outlier[n] for n in y ]
    y_true = np.array(y_true)
    model = pickle.load(open(filename, 'rb'))
    print(model)
    y_pred = model.predict(x)
    print("\t->Accuracy: ", accuracy_score(y_true, y_pred))