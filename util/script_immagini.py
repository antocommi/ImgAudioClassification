# -*- coding: utf-8 -*-
"""script_immagini.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/12qie3BKzsIYWt8bqe8KYpqtw6rfsRNLs
"""
import sys
#ARGS PARAMETERS
if len(sys.argv)==1: 
  raise Exception("inserire cartella dataset, modelliSalvati deve stare nella stessa dir di questo script")
ds_folder = sys.argv[1]
models_folder = "./ModelliSalvati/Immagini"
etichette = {'backpacks': 0, 'casual-shoes': 1, 'handbags': 2, 'heels': 3}
from PIL import Image
import glob
import time
import sys
import numpy as np
import pandas as pd
from keras.models import load_model
import h5py
import tensorflow as tf
import pickle
from sklearn.metrics import accuracy_score


image_list = []
i=0
t0=time.time()
labels = []
for filename in glob.glob(ds_folder+'/*.jpg'): 
    im=Image.open(filename)
    filename = filename[46:]
    filename = filename.replace(".jpg","")
    filename = filename.split("_")
    i=i+1
    if i%1000==0: 
      print(i)
      t1 = time.time()
      print("Tempo trascorso: ", end="")
      print(t1-t0)
    image_list.append(im)
    labels.append(filename)
#print(image_list)
label = [ k[0] for k in labels]
idimg = [ k[1] for k in labels]

unique_labels=np.unique(label)
l = 0
tmp = {}
for key in unique_labels:
  tmp[key]=l
  l=l+1
unique_labels = tmp
print(tmp)
label = pd.Series(label)

image_vector = [pd.Series(np.array(img.convert('L')).flatten()) for img in image_list]
image_vector = pd.DataFrame(image_vector)
y = label.to_numpy()
x = x.to_numpy()
x = x/255
# FINISHED GENERAL-PREPROCESSING

problems = ["/Classificatori","/outlier"]
models_folder+problems[0]+'/*'
import keras
for filename in glob.glob(models_folder+problems[0]+'/*'):
  ext = filename.split(".")
  if ext[1]!='png':
    print("Valutando",filename)
    if ext[1] == 'h5':
       model = keras.models.load_model(filename)
       xf = x.to_numpy().reshape(x.shape[0], 60, 80,1)
       res = model.evaluate(xf,y)
       print(res[1])
    else:
      model = pickle.load(open(filename, 'rb'))
      print(model.score(x,y))

outlier = {0:-1, 1:1, 2:-1, 3:-1}
outlier2 = {0:1, 1:0, 2:1, 3:1}

for filename in glob.glob(models_folder+problems[1]+'/*'):
  ext = filename.split(".")
  print("Valutando",filename)
  if ext[1] == 'pyod':
    y_true = [ outlier2[n] for n in y ]
    y_true = np.array(y_true)
    model = pickle.load(open(filename, 'rb'))
    y_pred = model.predict(x)
    print("\t->Accuracy: ", accuracy_score(y_true, y_pred))
  else:
    y_true = [ outlier[n] for n in y ]
    y_true = np.array(y_true)
    model = pickle.load(open(filename, 'rb'))
    print(model)
    y_pred = model.predict(x)
    print("\t->Accuracy: ", accuracy_score(y_true, y_pred))